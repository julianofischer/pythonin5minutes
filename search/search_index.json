{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Python is a dynamically typed and strongly typed language. Dynamically typed means that the variables are not stuck to a particular data type. So the same variable can store a number and a string in different blocks of your code. var = 18 var = \"eighteen\" Strongly typed means that the variable type matters when we are performing an operation. For instance, JavaScript is a weakly typed language and allows this: var = 1 + \"1\" //results in \"11\" The same operation would lead to a TypeError in Python: >>> 1 + \"1\" Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > TypeError : unsupported operand type ( s ) for + : 'int' and 'str' Python is also frequently presented as an interpreted language. This means that the language instructions are executed without an earlier compiling phase. This is not entirely true, but since this (interpreted vs. compiled) is more a characteristic of the implementation of the language than the language itself, we suggest that you do not get distracted by this definition. To print a message to the standard output you can use print function: print ( \"Hello world!\" ) # prints Hello World! print ( 1 ) # prints 1 To read from the standard input you can use the input function: name = input ( \"Type your name: \" ) Before you go further Sometimes we will use the interactive Python shell to present examples. In this cases, the presented output is distinguished by the presence of 3 greater than signs ( >>> ) preceding the command itself. Once you have installed Python, you can open the interactive shell by running python (or python3 depending on the system). Following is an example of an interactive shell session: >>> name = input ( \"Type your name: \" ) Type your name : Juliano >>> print ( \"The name typed was: \" + name ) The name types was : Juliano","title":"Introduction"},{"location":"#introduction","text":"Python is a dynamically typed and strongly typed language. Dynamically typed means that the variables are not stuck to a particular data type. So the same variable can store a number and a string in different blocks of your code. var = 18 var = \"eighteen\" Strongly typed means that the variable type matters when we are performing an operation. For instance, JavaScript is a weakly typed language and allows this: var = 1 + \"1\" //results in \"11\" The same operation would lead to a TypeError in Python: >>> 1 + \"1\" Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > TypeError : unsupported operand type ( s ) for + : 'int' and 'str' Python is also frequently presented as an interpreted language. This means that the language instructions are executed without an earlier compiling phase. This is not entirely true, but since this (interpreted vs. compiled) is more a characteristic of the implementation of the language than the language itself, we suggest that you do not get distracted by this definition. To print a message to the standard output you can use print function: print ( \"Hello world!\" ) # prints Hello World! print ( 1 ) # prints 1 To read from the standard input you can use the input function: name = input ( \"Type your name: \" )","title":"Introduction"},{"location":"#before-you-go-further","text":"Sometimes we will use the interactive Python shell to present examples. In this cases, the presented output is distinguished by the presence of 3 greater than signs ( >>> ) preceding the command itself. Once you have installed Python, you can open the interactive shell by running python (or python3 depending on the system). Following is an example of an interactive shell session: >>> name = input ( \"Type your name: \" ) Type your name : Juliano >>> print ( \"The name typed was: \" + name ) The name types was : Juliano","title":"Before you go further"},{"location":"basic_types/","text":"Basic Types in 5 Minutes Python has several types, here we will cover numeric (integer, floating point, and complex numbers), sequences (string, list, and tuple), mappings (dictionary), and set types. Numeric Types There are 3 distinct numeric types : integers, floating point numbers, and complex numbers. i = 10 # this is a integer number f = 10.258 # this is a floating point number c = complex ( 2 , 3 ) # this is a complex number -> 2 + 3j Sequence Types There are 4 basic sequence types: string, list, tuple, and range objects. Strings In Python, Strings are arrays os bytes representing unicode characters. Unlike other languages, Python does not have a character data type. A single character is a string with length of 1. Strings are surrounded by single quotes or double quotes. s1 = \"Hello world!\" # double-quoted string s2 = 'Hello world!' # single-quoted string If you are using single quotes surrounding your string, you are able to embed double quotes in your string. s1 = 'Hello \"world\"!' Similarly, if you are using double quotes surrounding your string, you are able to embed single quotes in it. s1 = \"Hello 'world'!\" Lists A list is a collection of things enclosed in [ ] and basically is a heterogeneous dynamic sized array. my_list = [ 1 , 2.3 , complex ( 2 , 3 ), \"string\" , [ \"embedded list\" , 1 ]] As you can see, a single list can contain different data types, including another list . Tuples Tuples are sometimes defined as immutable lists. Unlike lists, tuples are enclosed in ( ) . As well as lists, tuples are also heterogeneous. my_tuple = ( 1 , 2.3 , complex ( 2 , 3 ), \"string\" ) Mappings Mapping types maps hashable (a value that has a hash value that does not change during its entire lifetime) values to arbitrary objects. Currently there is only one standard mapping type in Python, the dictionary. Dictionary A dictionary is the Python implementation of a data structure also known as associative array. Dictionaries are enclosed by { } with a list o key-value pairs separated by a colon. # defining a dictionary d = { \"name\" : \"Python\" , \"version\" : 3.11 } In the above dictionary, \"name\" and \"version\" are keys while \"Python\" and 3.11 are values. Given a key, you can return its respective value from the dictionary: # reading a value from a dictionary d = { \"name\" : \"Python\" , \"version\" : 3.11 } x = d [ \"version\" ] # x is now 3.11 You can also add a new pair of key-value to a dictionary: d = { \"name\" : \"Python\" , \"version\" : 3.11 } d [ \"compliment\" ] = \"rocks\" Sets A set is a collection of distinct hashable objects. # creates an empty set s = set () # {} # creates a set with 4 elements s = set ( 1 , \"two\" , 3 , \"four\" ) # {1,\"two\",3,\"four\"} As well as list and tuples, sets are heterogeneous containers, we can store any hashable value in a set. The key difference here is that sets doesn't have repeated values: # create an set with 4 elements s = set ( 1 , \"two\" , 3 , \"four\" , 3 ) # {1,\"two\",3,\"four\"} -> the seconds occurrence of 3 is removed automatically","title":"Basic Types in 5 Minutes"},{"location":"basic_types/#basic-types-in-5-minutes","text":"Python has several types, here we will cover numeric (integer, floating point, and complex numbers), sequences (string, list, and tuple), mappings (dictionary), and set types.","title":"Basic Types in 5 Minutes"},{"location":"basic_types/#numeric-types","text":"There are 3 distinct numeric types : integers, floating point numbers, and complex numbers. i = 10 # this is a integer number f = 10.258 # this is a floating point number c = complex ( 2 , 3 ) # this is a complex number -> 2 + 3j","title":"Numeric Types"},{"location":"basic_types/#sequence-types","text":"There are 4 basic sequence types: string, list, tuple, and range objects.","title":"Sequence Types"},{"location":"basic_types/#strings","text":"In Python, Strings are arrays os bytes representing unicode characters. Unlike other languages, Python does not have a character data type. A single character is a string with length of 1. Strings are surrounded by single quotes or double quotes. s1 = \"Hello world!\" # double-quoted string s2 = 'Hello world!' # single-quoted string If you are using single quotes surrounding your string, you are able to embed double quotes in your string. s1 = 'Hello \"world\"!' Similarly, if you are using double quotes surrounding your string, you are able to embed single quotes in it. s1 = \"Hello 'world'!\"","title":"Strings"},{"location":"basic_types/#lists","text":"A list is a collection of things enclosed in [ ] and basically is a heterogeneous dynamic sized array. my_list = [ 1 , 2.3 , complex ( 2 , 3 ), \"string\" , [ \"embedded list\" , 1 ]] As you can see, a single list can contain different data types, including another list .","title":"Lists"},{"location":"basic_types/#tuples","text":"Tuples are sometimes defined as immutable lists. Unlike lists, tuples are enclosed in ( ) . As well as lists, tuples are also heterogeneous. my_tuple = ( 1 , 2.3 , complex ( 2 , 3 ), \"string\" )","title":"Tuples"},{"location":"basic_types/#mappings","text":"Mapping types maps hashable (a value that has a hash value that does not change during its entire lifetime) values to arbitrary objects. Currently there is only one standard mapping type in Python, the dictionary.","title":"Mappings"},{"location":"basic_types/#dictionary","text":"A dictionary is the Python implementation of a data structure also known as associative array. Dictionaries are enclosed by { } with a list o key-value pairs separated by a colon. # defining a dictionary d = { \"name\" : \"Python\" , \"version\" : 3.11 } In the above dictionary, \"name\" and \"version\" are keys while \"Python\" and 3.11 are values. Given a key, you can return its respective value from the dictionary: # reading a value from a dictionary d = { \"name\" : \"Python\" , \"version\" : 3.11 } x = d [ \"version\" ] # x is now 3.11 You can also add a new pair of key-value to a dictionary: d = { \"name\" : \"Python\" , \"version\" : 3.11 } d [ \"compliment\" ] = \"rocks\"","title":"Dictionary"},{"location":"basic_types/#sets","text":"A set is a collection of distinct hashable objects. # creates an empty set s = set () # {} # creates a set with 4 elements s = set ( 1 , \"two\" , 3 , \"four\" ) # {1,\"two\",3,\"four\"} As well as list and tuples, sets are heterogeneous containers, we can store any hashable value in a set. The key difference here is that sets doesn't have repeated values: # create an set with 4 elements s = set ( 1 , \"two\" , 3 , \"four\" , 3 ) # {1,\"two\",3,\"four\"} -> the seconds occurrence of 3 is removed automatically","title":"Sets"},{"location":"dicts/","text":"Dictionaries in 5 minutes","title":"Dictionaries in 5 minutes"},{"location":"dicts/#dictionaries-in-5-minutes","text":"","title":"Dictionaries in 5 minutes"},{"location":"example/","text":"Non erat magna adferre harenae ferox quod Hic rapidum cum conplecti adire reddi quid Lorem markdownum mensam transit languida, quam ictibus carinis et procorum saevorum, humanas. O callida nunc, Parnasi fortibus illos, hic utque ipsa , cognosceret praebebat nubis numen et incessere quae. Atridae tulit Pagasaeus fueramque sinunt, Averna petentem, stagni hoc fictilibus lacrimaeque premebat tibia lacrimabile albis ad. Quamvis triste in facere recubare capillis et, quem matura carchesia omnis cycnorum, nemorum fugientem remittant centum in? Cum gauderet vagantem Tempus De conponi sustinet loqui matre Arcadis Hyperionis Praedam lacrimas verum quibus Fortes inperfecta Rector rubet fama prole loca axes tulit Et vidisse manat ait , in cognovi , concepit crimina , plenissima removi lupi moram urbe, me. Nisi fallere, foedantem se dixit. Committit inque ut eripe , etiam ambustique Aurorae placida fluctus in tela dederant erigitur Thestius recepta, ferro aethera haeremusque. Fugientem sedes aeripedes; nuda, nec mea virginitate undas Argos iuvenes nec vocem tu! Ignotae voracis estque Vix pugnabant nostra gratum Palilibus plenum his Pumice nympha Hippotades narratur Nota frondere In haec per dignatur visum Furiosaque deorum tergum Poena Dictaeaque altis longi Cephalus illius sanguine caeli sit parente egit annos! In figuras arcus resupinum Longius ursa; laevaque sub hic ieiunia memorabile mentis. Luctuque mihi, in repetoque Sisyphe paventem virtute gratissima saepe. Marmore fortissime non distinctus herba, candida abeunt concipit ait penates vimque more scinditque iuncta miserarum quorum, quam! Putet traxere coniunx: nantemque Sibyllae picae Alcmenae labores Dardaniam. if (bookmarkSocketClean) { impression = 23; proxyXml(publicListserv); } else { netiquetteGraphicLag.yobibyte *= pointWebPerl(404855); offline.domain(pci, mainframe(boot_rw_eup), sprite); } var backsideActive = stationSkuBatch / cd_xslt_ddr - 1; var pinterest_tiger = database * zip / driveCc; tutorialTft -= realSamplingCard; plagiarism /= postscript(optic_interface, drive); Tuum si ferinis, dum harenam silvis. Qua illa in ense frementis canendo pauper bracchia deserit castris. Proxima manat. Cum illa conanti! Cogor nisi, posito poscuntque capillos ponit tenderet et inquit, transferre . Unde caput dabat armos ecce novi rubens. Ore torvo cineres sociis maternaque postquam Hymenaeus in trabes saevo navigat, patriumque.","title":"Non erat magna adferre harenae ferox quod"},{"location":"example/#non-erat-magna-adferre-harenae-ferox-quod","text":"","title":"Non erat magna adferre harenae ferox quod"},{"location":"example/#hic-rapidum-cum-conplecti-adire-reddi-quid","text":"Lorem markdownum mensam transit languida, quam ictibus carinis et procorum saevorum, humanas. O callida nunc, Parnasi fortibus illos, hic utque ipsa , cognosceret praebebat nubis numen et incessere quae. Atridae tulit Pagasaeus fueramque sinunt, Averna petentem, stagni hoc fictilibus lacrimaeque premebat tibia lacrimabile albis ad. Quamvis triste in facere recubare capillis et, quem matura carchesia omnis cycnorum, nemorum fugientem remittant centum in? Cum gauderet vagantem Tempus De conponi sustinet loqui matre Arcadis Hyperionis Praedam lacrimas verum quibus Fortes inperfecta Rector rubet fama prole loca axes tulit Et vidisse manat ait , in cognovi , concepit crimina , plenissima removi lupi moram urbe, me. Nisi fallere, foedantem se dixit. Committit inque ut eripe , etiam ambustique Aurorae placida fluctus in tela dederant erigitur Thestius recepta, ferro aethera haeremusque. Fugientem sedes aeripedes; nuda, nec mea virginitate undas Argos iuvenes nec vocem tu! Ignotae voracis estque Vix pugnabant nostra gratum Palilibus plenum his Pumice nympha Hippotades narratur Nota frondere In haec per dignatur visum","title":"Hic rapidum cum conplecti adire reddi quid"},{"location":"example/#furiosaque-deorum-tergum","text":"Poena Dictaeaque altis longi Cephalus illius sanguine caeli sit parente egit annos! In figuras arcus resupinum Longius ursa; laevaque sub hic ieiunia memorabile mentis. Luctuque mihi, in repetoque Sisyphe paventem virtute gratissima saepe. Marmore fortissime non distinctus herba, candida abeunt concipit ait penates vimque more scinditque iuncta miserarum quorum, quam! Putet traxere coniunx: nantemque Sibyllae picae Alcmenae labores Dardaniam. if (bookmarkSocketClean) { impression = 23; proxyXml(publicListserv); } else { netiquetteGraphicLag.yobibyte *= pointWebPerl(404855); offline.domain(pci, mainframe(boot_rw_eup), sprite); } var backsideActive = stationSkuBatch / cd_xslt_ddr - 1; var pinterest_tiger = database * zip / driveCc; tutorialTft -= realSamplingCard; plagiarism /= postscript(optic_interface, drive); Tuum si ferinis, dum harenam silvis. Qua illa in ense frementis canendo pauper bracchia deserit castris. Proxima manat. Cum illa conanti! Cogor nisi, posito poscuntque capillos ponit tenderet et inquit, transferre . Unde caput dabat armos ecce novi rubens. Ore torvo cineres sociis maternaque postquam Hymenaeus in trabes saevo navigat, patriumque.","title":"Furiosaque deorum tergum"},{"location":"lists/","text":"Lists in 5 minutes","title":"Lists in 5 minutes"},{"location":"lists/#lists-in-5-minutes","text":"","title":"Lists in 5 minutes"},{"location":"numeric/","text":"Numeric types in 5 minutes There are 3 distinct numeric types : integers, floating point numbers, and complex numbers. Integers An integer is a whole number without decimal places. For instance 18 is an integer but 18.1 is not. The name for the integer data type is int and you can check the type of a value using the type function. >>> type ( 18 ) < class ' int '> You can use the int() function to create integers. The following is the same as x = 18 . x = int ( 18 ) # x is now 18 You can also use int() to convert from string values to integer values: x = int ( \"18\" ) # x is now 18 For readability purposes, you can use underscores (_) to group digits: x = 1_000_000_000 # x is 1000000000 An integer has no theoretical maximum limit in python, so, you can have a integer as big as this one: x = 1_000_000_000_000_000_000 # 1 quintillion In practice, the biggest value you can represent in Python will depend on your computer's memory. Floating pointing numbers An floating pointing number (or float) is a number with decimal places. For instance 18 is not a float but 18.1 is. The name for the float data type is float and you can check the type of a value using the type function. >>> type ( 18.1 ) < class ' float '> You can use the float() function to create integers. The following is the same as x = 18.18 . x = float ( 18.18 ) # x is now 18.18 You can also use float() to convert from string values to integer values: x = float ( \"18.18\" ) # x is now 18.18 As well as an integer, a float has no theoretical maximum limit in python, so, you can have a float like this one: x = 1_000_000_000_000_000.12 # 1 quintillion plus some decimal places However, if you need to preserve the decimal places without rouding or losing precision, you should use the decimal module. Operations Integers and floats support the following operations: Operation x y result description x + y 10 3 13 sum of x and y x - y 10 3 10 difference of x and y x * y 10 3 30 product of x and y x / y 10 3 3.333... quotient of x and y x // y 10 3 3 floored quotient of x and y (integer division of x and y) x % y 10 3 2 remainder of x divided by y -x 10 -10 x negated +x 10 10 x unchanged abs(x) -10 10 the absolute (magnitude) value of x pow(x, y) 10 3 1000 x to the power of y x ** y 10 3 1000 x to the power of y","title":"Numeric types in 5 minutes"},{"location":"numeric/#numeric-types-in-5-minutes","text":"There are 3 distinct numeric types : integers, floating point numbers, and complex numbers.","title":"Numeric types in 5 minutes"},{"location":"numeric/#integers","text":"An integer is a whole number without decimal places. For instance 18 is an integer but 18.1 is not. The name for the integer data type is int and you can check the type of a value using the type function. >>> type ( 18 ) < class ' int '> You can use the int() function to create integers. The following is the same as x = 18 . x = int ( 18 ) # x is now 18 You can also use int() to convert from string values to integer values: x = int ( \"18\" ) # x is now 18 For readability purposes, you can use underscores (_) to group digits: x = 1_000_000_000 # x is 1000000000 An integer has no theoretical maximum limit in python, so, you can have a integer as big as this one: x = 1_000_000_000_000_000_000 # 1 quintillion In practice, the biggest value you can represent in Python will depend on your computer's memory.","title":"Integers"},{"location":"numeric/#floating-pointing-numbers","text":"An floating pointing number (or float) is a number with decimal places. For instance 18 is not a float but 18.1 is. The name for the float data type is float and you can check the type of a value using the type function. >>> type ( 18.1 ) < class ' float '> You can use the float() function to create integers. The following is the same as x = 18.18 . x = float ( 18.18 ) # x is now 18.18 You can also use float() to convert from string values to integer values: x = float ( \"18.18\" ) # x is now 18.18 As well as an integer, a float has no theoretical maximum limit in python, so, you can have a float like this one: x = 1_000_000_000_000_000.12 # 1 quintillion plus some decimal places However, if you need to preserve the decimal places without rouding or losing precision, you should use the decimal module.","title":"Floating pointing numbers"},{"location":"numeric/#operations","text":"Integers and floats support the following operations: Operation x y result description x + y 10 3 13 sum of x and y x - y 10 3 10 difference of x and y x * y 10 3 30 product of x and y x / y 10 3 3.333... quotient of x and y x // y 10 3 3 floored quotient of x and y (integer division of x and y) x % y 10 3 2 remainder of x divided by y -x 10 -10 x negated +x 10 10 x unchanged abs(x) -10 10 the absolute (magnitude) value of x pow(x, y) 10 3 1000 x to the power of y x ** y 10 3 1000 x to the power of y","title":"Operations"},{"location":"sets/","text":"Sets in 5 minutes","title":"Sets in 5 minutes"},{"location":"sets/#sets-in-5-minutes","text":"","title":"Sets in 5 minutes"},{"location":"strings/","text":"Strings in 5 minutes","title":"Strings in 5 minutes"},{"location":"strings/#strings-in-5-minutes","text":"","title":"Strings in 5 minutes"},{"location":"tuples/","text":"Tuples in 5 minutes","title":"Tuples in 5 minutes"},{"location":"tuples/#tuples-in-5-minutes","text":"","title":"Tuples in 5 minutes"}]}